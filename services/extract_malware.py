import re
import spacy
from collections import defaultdict
import os 
import sys

sys.path.append(os.path.abspath(os.path.dirname(__file__)))

from static.keywords import MALWARE_TAGS, ADDITIONAL_PATTERNS
from static.regex_pattern import HASH_PATTERNS

# Load the spaCy NLP model
model_path = os.path.join(os.path.dirname(__file__), "en_core_web_sm")
nlp = spacy.load(model_path)


def extract_hashes(report_text):
    """Extracts hashes from the report text."""
    hashes = {key: pattern.findall(report_text) for key, pattern in HASH_PATTERNS.items()}
    # Remove empty lists
    return {k: v for k, v in hashes.items() if v}

def extract_additional_features(report_text):
    """Extracts file paths and command lines from the report text."""
    features = {}

    # Extract file paths
    file_path_matches = ADDITIONAL_PATTERNS["FilePath"].findall(report_text)
    features["FilePath"] = list(set(file_path_matches))  # Remove duplicates

    # Extract command-line arguments
    cmd_line_matches = ADDITIONAL_PATTERNS["CommandLine"].findall(report_text)
    features["CommandLine"] = list(set(cmd_line_matches))  # Remove duplicates

    # Remove empty lists
    return {k: v for k, v in features.items() if v}

def extract_tags(report_text):
    """Extracts malware-related tags using regex and NLP."""
    # Regex-based tag extraction
    tag_regex = re.compile(r"\b(?:" + "|".join(map(re.escape, MALWARE_TAGS)) + r")\b", re.IGNORECASE)
    extracted_tags = set(tag_regex.findall(report_text))
    
    # NLP-based tag extraction
    doc = nlp(report_text)
    extracted_tags |= {token.text.lower() for token in doc if token.text.lower() in MALWARE_TAGS}
    
    return list(extracted_tags)

def extract_relationships(report_text):
    """Extracts relationships between entities using spaCy's dependency parsing."""
    doc = nlp(report_text)
    relationships = defaultdict(list)
    
    for sentence in doc.sents:
        for token in sentence:
            if token.dep_ == "nsubj" and token.head.pos_ == "VERB":
                subject = token.text
                verb = token.head.text
                obj = [child.text for child in token.head.children if child.dep_ == "dobj"]
                relationships[subject].append((verb, obj))
    
    return dict(relationships)

def extract_malware_details(report_text):
    """Extracts all malware-related details from the report text."""
    # Extract hashes
    hashes = extract_hashes(report_text)
    
    # Extract additional features
    additional_features = extract_additional_features(report_text)
    
    # Extract tags
    tags = extract_tags(report_text)
    
    return {
        "Hashes": hashes,
        "AdditionalFeatures": additional_features,
        "Tags": tags,
    }
