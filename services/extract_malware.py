import re
import spacy
import json

# Load the spaCy NLP model
nlp = spacy.load('en_core_web_sm')

def extract_malware_details(report_text):
    # Regular expressions for extracting hash values
    sha1_regex = r'\b[a-f0-9]{40}\b'
    sha256_regex = r'\b[a-f0-9]{64}\b'
    md5_regex = r'\b[a-f0-9]{32}\b'
    ssdeep_regex = r'\b[0-9]+:[A-F0-9]+\b'  # SSDeep hash pattern
    tlsh_regex = r'\b[0-9A-F]{32}\b'  # TLSH hash pattern

    # Search for all relevant fields (hash values)
    sha1_matches = re.findall(sha1_regex, report_text)
    sha256_matches = re.findall(sha256_regex, report_text)
    md5_matches = re.findall(md5_regex, report_text)
    ssdeep_matches = re.findall(ssdeep_regex, report_text)
    tlsh_matches = re.findall(tlsh_regex, report_text)

    # Use spaCy NLP to extract entities for malware name and type
    doc = nlp(report_text)
    malware_name = 'Not available'
    malware_family = 'Not available'
    malware_type = 'Not available'

    # Search for specific patterns or entities that may represent malware names
    for ent in doc.ents:
        if ent.label_ == 'ORG':  # Looking for organization names, which could include malware names
            if 'AeroBlade' in ent.text:
                malware_name = 'AeroBlade'
            elif 'Zeus' in ent.text:
                malware_name = 'Zeus'
            # Add other known malware families here...

    # Search for malware type (could be expanded based on report content)
    malware_type_keywords = ['Trojan', 'Worm', 'Virus', 'Ransomware', 'Spyware', 'Adware', 'Rootkit']
    for keyword in malware_type_keywords:
        if keyword.lower() in report_text.lower():
            malware_type = keyword.capitalize()

    # Example tags based on the report context
    tags = ['Reverse Shell', 'Remote Template Injection', 'Spear-phishing', 'DLL']  # Modify based on report

    # Create metadata dictionary to hold all relevant details
    metadata = {
        'Malware Name': malware_name,
        'Malware Family': malware_family,
        'SHA1': sha1_matches if sha1_matches else 'Not available',
        'SHA256': sha256_matches if sha256_matches else 'Not available',
        'MD5': md5_matches if md5_matches else 'Not available',
        'SSDeep': ssdeep_matches if ssdeep_matches else 'Not available',
        'TLSH': tlsh_matches if tlsh_matches else 'Not available',
        'Malware Type': malware_type,
        'Tags': tags
    }

    return metadata