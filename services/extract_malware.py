import spacy
import re
import json

# Initialize spaCy model for named entity recognition
nlp = spacy.load("en_core_web_sm")

# Function to extract SSDEEP and TLSH from the report
def extract_ssdeep_tlsh(text):
    ssdeep = None
    tlsh = None

    # Search for SSDEEP and TLSH values in the text
    ssdeep_match = re.search(r"ssdeep\s*[:=]?\s*([a-zA-Z0-9+/=]+)", text, re.IGNORECASE)
    tlsh_match = re.search(r"tlsh\s*[:=]?\s*([a-fA-F0-9]+)", text, re.IGNORECASE)

    if ssdeep_match:
        ssdeep = ssdeep_match.group(1)
    if tlsh_match:
        tlsh = tlsh_match.group(1)
    
    return ssdeep, tlsh

# Function to extract malware details with metadata from the report
def extract_malware_details(text):
    malware_details = []
    
    # Extract SSDEEP and TLSH from the report
    ssdeep, tlsh = extract_ssdeep_tlsh(text)

    # Search for malware names and hashes using regular expressions
    hash_patterns = {
        'md5': r"\b([a-fA-F0-9]{32})\b",  # MD5 hash
        'sha1': r"\b([a-fA-F0-9]{40})\b",  # SHA1 hash
        'sha256': r"\b([a-fA-F0-9]{64})\b",  # SHA256 hash
    }

    malware_info = {
        'Name': [],
        'md5': [],
        'sha1': [],
        'sha256': [],
        'ssdeep': ssdeep if ssdeep else "Not Available",
        'TLSH': tlsh if tlsh else "Not Available",
        'tags': [],
        'malware_type': [],
        'attack_vector': [],
        'file_size': "Not Available",
        'targeted_systems': []
    }

    # Using regex to extract hashes from the report
    for hash_type, pattern in hash_patterns.items():
        matches = re.findall(pattern, text)
        malware_info[hash_type].extend(matches)

    # Search for malware names (e.g., Shamoon, Emotet)
    malware_names = re.findall(r"\b([A-Za-z0-9\-]+)\b", text)
    known_malware = ["Shamoon", "Emotet", "Trickbot", "Ryuk", "Wannacry", "NotPetya"]  # Expand list as needed
    for name in malware_names:
        if name.lower() in [km.lower() for km in known_malware]:
            malware_info['Name'].append(name)

    # Extract additional metadata like tags, type, and attack vector
    # Extract tags
    tags_match = re.findall(r"tags\s*[:=]?\s*([A-Za-z0-9, ]+)", text, re.IGNORECASE)
    if tags_match:
        malware_info['tags'] = [tag.strip() for tag in tags_match[0].split(",")]

    # Extract malware type
    malware_type_match = re.findall(r"malware\s*type\s*[:=]?\s*([A-Za-z, ]+)", text, re.IGNORECASE)
    if malware_type_match:
        malware_info['malware_type'] = [mtype.strip() for mtype in malware_type_match[0].split(",")]

    # Extract attack vector
    attack_vector_match = re.findall(r"attack\s*vector\s*[:=]?\s*([A-Za-z, ]+)", text, re.IGNORECASE)
    if attack_vector_match:
        malware_info['attack_vector'] = [vector.strip() for vector in attack_vector_match[0].split(",")]

    # Extract file size
    file_size_match = re.findall(r"file\s*size\s*[:=]?\s*(\d+)", text, re.IGNORECASE)
    if file_size_match:
        malware_info['file_size'] = file_size_match[0]

    # Extract targeted systems
    targeted_systems_match = re.findall(r"targeted\s*systems\s*[:=]?\s*([A-Za-z, ]+)", text, re.IGNORECASE)
    if targeted_systems_match:
        malware_info['targeted_systems'] = [system.strip() for system in targeted_systems_match[0].split(",")]

    # Return extracted and enriched malware information
    return {'Malware': [malware_info]}

# Example usage
if __name__ == "__main__":
    # Example input (from a report)
    report_text = """
    A new variant of the Shamoon malware has been detected.
    MD5 hash: 6d515dafef42a5648754de3c0fa6adfc, SHA1 hash: b87cf34a7d405b7cbbaf7e23dbc2c1a3, 
    SHA256: abc348d3cc40521afc165aa6dc2d66fd.
    The SSDEEP hash is bgfnh2sjab3, and TLSH is tlsh2.42fd9e4b8a7b6d31.
    Tags: ransomware, wiper
    Malware type: Trojan
    Attack vector: email, phishing
    File size: 2048
    Targeted systems: Windows, Linux
    """

    # Extract malware details from the report
    malware_details = extract_malware_details(report_text)
    
    # Print the extracted malware details in JSON format
    print(json.dumps(malware_details, indent=4))
