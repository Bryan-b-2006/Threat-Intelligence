import re
import spacy
from collections import defaultdict

# Load the spaCy NLP model
nlp = spacy.load("en_core_web_sm")

# Improved regex patterns for hash extraction
HASH_PATTERNS = {
    "SHA1": re.compile(r"\b[a-fA-F0-9]{40}\b"),  # Case-insensitive SHA1
    "SHA256": re.compile(r"\b[a-fA-F0-9]{64}\b"),  # Case-insensitive SHA256
    "MD5": re.compile(r"\b[a-f0-9]{32}\b(?![:a-f0-9]{33})"),  # Improved MD5
    "SSDeep": re.compile(r"\b(3[2-9]|[1248]\d{2,4}|16384):[A-Za-z0-9+/=]+:[A-Za-z0-9+/=]+\b"),
    "TLSH": re.compile(r"\b[0-9A-F]{32}\b(?![:0-9A-F]{33})")  # Improved TLSH
}

# Expanded malware-related tag list
MALWARE_TAGS = {
    "backdoor", "trojan", "worm", "virus", "ransomware", "spyware", "adware", "rootkit", "keylogger",
    "botnet", "fileless malware", "payload delivery", "data exfiltration", "cryptojacking malware",
    "sql injection", "cross-site scripting", "buffer overflow", "zero-day exploit", "brute force attack",
    "man-in-the-middle", "denial-of-service", "packet spoofing", "session hijacking",
    
    # Additional Tags:
    "phishing", "spear phishing", "whaling", "credential stuffing", "password spraying",
    "iot malware", "mobile malware", "mac malware", "linux malware", "ransomware-as-a-service",
    "malvertising", "watering hole attack", "drive-by download", "dns hijacking", "domain shadowing",
    "privilege escalation", "lateral movement", "command and control", "remote access trojan",
    "social engineering", "insider threat", "supply chain attack", "deepfake malware",
    "advanced persistent threat", "logic bomb", "time bomb", "polymorphic malware",
    "metamorphic malware", "sandbox evasion", "anti-forensics", "steganography",
    "network sniffing", "port scanning", "reverse shell", "exploit kit", "malware dropper",
    "multi-stage malware", "credential dumping", "kerberoasting", "pass-the-hash",
    "golden ticket attack", "silver ticket attack", "dll injection", "process hollowing",
    "api hooking", "registry manipulation", "persistence mechanism", "scheduled task",
    "service abuse", "wmi abuse", "powershell abuse", "living off the land",
    "cloud malware", "container escape", "server-side request forgery", "xml external entity",
    "insecure deserialization", "race condition", "integer overflow", "use after free",
    "format string vulnerability", "heap spraying", "return-oriented programming",
    "code injection", "memory corruption", "unvalidated input", "directory traversal",
    "path traversal", "privilege abuse", "misconfiguration", "default credentials",
    "weak encryption", "broken authentication", "security mismanagement", "shadow it",
    "unpatched software", "vulnerable library", "third-party risk", "zero trust violation"
}

def extract_malware_details(report_text):
    """Extracts malware-related hashes and tags from a given report text."""
    
    # Extract hashes using improved regex
    hashes = {key: pattern.findall(report_text) for key, pattern in HASH_PATTERNS.items()}
    
    # SSDeep extraction: Ensure valid format and remove duplicates
    if "SSDeep" in hashes:
        hashes["SSDeep"] = sorted(set(filter(lambda h: ":" in h, hashes["SSDeep"])))

    # Remove empty lists
    hashes = {k: v for k, v in hashes.items() if v}  

    # Extract tags using regex
    tag_regex = re.compile(r"\b(?:" + "|".join(map(re.escape, MALWARE_TAGS)) + r")\b", re.IGNORECASE)
    extracted_tags = set(tag_regex.findall(report_text))

    # Additional NLP-based tag extraction
    doc = nlp(report_text)
    extracted_tags |= {token.text.lower() for token in doc if token.text.lower() in MALWARE_TAGS}

    return {
        "Hashes": hashes,
        "Tags": list(extracted_tags)
    }
